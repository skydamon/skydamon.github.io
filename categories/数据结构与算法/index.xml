<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构与算法 on 胡刘郏的技术博客</title>
    <link>https://www.huliujia.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 数据结构与算法 on 胡刘郏的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 19 Jan 2019 19:40:08 +0800</lastBuildDate>
    
	<atom:link href="https://www.huliujia.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>点对点最短路径算法：Floyd Warshall算法</title>
      <link>https://www.huliujia.com/blog/82ee513b870106e5e7b3cff44579e3ee266b2e3e/</link>
      <pubDate>Sat, 19 Jan 2019 19:40:08 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/82ee513b870106e5e7b3cff44579e3ee266b2e3e/</guid>
      <description>背景知识 图简介 图由节点和边组成，边有方向的图称为有向图，边没有方向的图称为无向图，最短路径算法里可以把无向图视为双向连接的有向图。 边有权重的图称为有权图，边没有权重的图称为无权图，无权图可以视为边的权重均为1的图。 点对点最短路径 求图中任意（所有）两点之间的</description>
    </item>
    
    <item>
      <title>最小生成树(MST)：Prim算法与Kruskal算法</title>
      <link>https://www.huliujia.com/blog/dab47d7b495f721c94db0959b69585abd0016a49/</link>
      <pubDate>Thu, 29 Mar 2018 19:19:49 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/dab47d7b495f721c94db0959b69585abd0016a49/</guid>
      <description>什么是最小生成树 最小生成树是一副连通加权无向图中一棵权值最小的生成树[维基百科] 常见的应用例子有铺设道路连接所有城市、铺设管道等，目标都是使总长度最短。 求解最小生成树的基本原理 Prim算法和Kruskal算法是求解最小生成树的两种经典算法，这两个算法都是贪</description>
    </item>
    
    <item>
      <title>二叉树的遍历（先序遍历，中序遍历，后序遍历，层次遍历）</title>
      <link>https://www.huliujia.com/blog/e06651c8dbbb668c7476bd922f78127a72f7eec3/</link>
      <pubDate>Mon, 29 Jan 2018 08:50:20 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/e06651c8dbbb668c7476bd922f78127a72f7eec3/</guid>
      <description>二叉树简介 维基百科对二叉树的定义：二叉树（英语：Binary tree）是每个节点最多只有两个分支(不存在分支度大于2的节点)的树结构。通常分支被称作“左子树”和“右子树”。二叉树的分支具有左右次序，不能颠倒。 二叉树的遍历有4种方式，先序遍历，中序遍历，后序</description>
    </item>
    
    <item>
      <title>Trie，单词查找树</title>
      <link>https://www.huliujia.com/blog/4c5cd4dd260a03535d12579195dfaf17e57c3b43/</link>
      <pubDate>Sat, 27 Jan 2018 09:01:43 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/4c5cd4dd260a03535d12579195dfaf17e57c3b43/</guid>
      <description>Trie简介 Trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情</description>
    </item>
    
    <item>
      <title>九种经典排序算法详解（冒泡排序，插入排序，选择排序，快速排序，归并排序，堆排序，计数排序，桶排序，基数排序）</title>
      <link>https://www.huliujia.com/blog/106f46450aa7b6df2859bc6cf72355cfdf2d915e/</link>
      <pubDate>Fri, 26 Jan 2018 15:38:45 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/106f46450aa7b6df2859bc6cf72355cfdf2d915e/</guid>
      <description>综述 最近复习了各种排序算法，记录了一下学习总结和心得，希望对大家能有所帮助。本文介绍了冒泡排序、插入排序、选择排序、快速排序、归并排序、堆排序、计数排序、桶排序、基数排序9种经典的排序算法。针对每种排序算法分析了算法的主要思路，每个算法都附上了伪代码和C+</description>
    </item>
    
    <item>
      <title>单源点最短路径算法：Dijkstra算法</title>
      <link>https://www.huliujia.com/blog/e7ccfcbb1aefac5e938085dd930ff6fed9bc2a2d/</link>
      <pubDate>Fri, 19 Jan 2018 11:36:24 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/e7ccfcbb1aefac5e938085dd930ff6fed9bc2a2d/</guid>
      <description>背景知识 图简介 图由节点和边组成，边有方向的图称为有向图，边没有方向的图称为无向图，最短路径算法里可以把无向图视为双向连接的有向图。 边有权重的图称为有权图，边没有权重的图称为无权图，无权图可以视为边的权重均为1的图。 单源点最短路径 给定图中的一个节点，求该节点</description>
    </item>
    
    <item>
      <title>单源点最短路径算法：Bellman Ford算法</title>
      <link>https://www.huliujia.com/blog/635c265b38c9b4fa17e79d33fa6b24a84544513f/</link>
      <pubDate>Fri, 19 Jan 2018 11:26:32 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/635c265b38c9b4fa17e79d33fa6b24a84544513f/</guid>
      <description>背景知识 图简介 图由节点和边组成，边有方向的图称为有向图，边没有方向的图称为无向图，最短路径算法里可以把无向图视为双向连接的有向图。 边有权重的图称为有权图，边没有权重的图称为无权图，无权图可以视为边的权重均为1的图。 单源点最短路径 给定图中的一个节点，求该节点</description>
    </item>
    
  </channel>
</rss>