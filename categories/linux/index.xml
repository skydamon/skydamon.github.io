<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 胡刘郏的技术博客</title>
    <link>https://www.huliujia.com/categories/linux/</link>
    <description>Recent content in Linux on 胡刘郏的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 07 Mar 2020 12:43:37 +0800</lastBuildDate>
    
	<atom:link href="https://www.huliujia.com/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[译] Linux定时任务工具crontab入门教程</title>
      <link>https://www.huliujia.com/blog/69c52d7badd64f2cd86765a3a8fee88b5cfaa13b/</link>
      <pubDate>Sat, 07 Mar 2020 12:43:37 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/69c52d7badd64f2cd86765a3a8fee88b5cfaa13b/</guid>
      <description>crontab是类Unix系统最好用的工具之一，用来设置定时任务，这些定时任务也被称为“Cron Jobs”。Cron通常被用于运行定时备份、监控磁盘使用情况、定期删除不需要的文件（比如日志文件）、运行系统维护任务等。本文主要介绍crontab的基础使用，基</description>
    </item>
    
    <item>
      <title>Linux/MacOS批量删除文件中的^M符号</title>
      <link>https://www.huliujia.com/blog/003841a593bc4a2741d273eb8f98e872af6cb63a/</link>
      <pubDate>Fri, 15 Mar 2019 15:39:15 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/003841a593bc4a2741d273eb8f98e872af6cb63a/</guid>
      <description>在Windows系统下编辑过的文本文件通常都会在行尾留下&amp;rdquo;^M&amp;rdquo;符号，在Linux下使用 cat -v filename 可以查看文件中的^M符号。 多出的^M符号是由于Windows/DOS中换行使用的是\r\n两个字符，\r是回车（carriage），\n是</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记（十一）内核同步方法（自旋锁，信号量，互斥锁，完成变量，顺序锁，禁止抢占）</title>
      <link>https://www.huliujia.com/blog/148dbabde2804f33fc69c42699a84637082c5d78/</link>
      <pubDate>Sat, 09 Jun 2018 11:23:37 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/148dbabde2804f33fc69c42699a84637082c5d78/</guid>
      <description>原子操作 Linux内核提供了多种同步机制，这些机制本质上都是通过原子操作来实现的。原子操作可以保证指令以原子方式执行，不会被中途打断（中断也不会打断一个指令，处理器只有在当前指令完成后才会去处理中断）。内核提供了两套原子操作的接口，一套用于整数原子操作，一</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记（十）中断处理的下半部（Bottom Halve）</title>
      <link>https://www.huliujia.com/blog/1553798b9dd8620c2fb8839ea0fda9cb2490d83d/</link>
      <pubDate>Wed, 06 Jun 2018 11:23:25 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/1553798b9dd8620c2fb8839ea0fda9cb2490d83d/</guid>
      <description>为什么需要下半部 中断处理程序有如下局限性： 中断处理程序是异步中断，被其中断执行的代码（包括别的中断处理程序）可能正在执行非常重要的任务，为了避免被中断进程停止过长时间，中断处理程序的执行应该越快越好。 中断处理程序会禁用其服务的中断线（没有设置IRQF_DI</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记（九）中断和中断处理程序</title>
      <link>https://www.huliujia.com/blog/98ea487478d486083017bc1c0ff0727851cfe096/</link>
      <pubDate>Mon, 04 Jun 2018 11:23:18 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/98ea487478d486083017bc1c0ff0727851cfe096/</guid>
      <description>中断 为了对计算机的硬件（键盘，硬盘，鼠标，网卡等）进行管理，内核需要和这些硬件通信。一种方式是使用轮训（polling）的方式，这种方式周期性地查看所有硬件设备的状态并做相应处理，这会造成很多不必要的系统开销。Linux内核使用中断的方式来管理硬件设备，中</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记（八）Page Cache与Page回写</title>
      <link>https://www.huliujia.com/blog/6d9091df3638fb9f6cea7867d7dd2e8281435b8c/</link>
      <pubDate>Sat, 02 Jun 2018 09:11:07 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/6d9091df3638fb9f6cea7867d7dd2e8281435b8c/</guid>
      <description>综述 Page cache是通过将磁盘中的数据缓存到内存中，从而减少磁盘I/O操作，从而提高性能。此外，还要确保在page cache中的数据更改时能够被同步到磁盘上，后者被称为page回写（page writeback）。一个inode对应一个page cache对象，</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记（七）系统调用</title>
      <link>https://www.huliujia.com/blog/4645655cea5d5b6ecb20280536cd86e547421eeb/</link>
      <pubDate>Wed, 30 May 2018 09:06:54 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/4645655cea5d5b6ecb20280536cd86e547421eeb/</guid>
      <description>综述 用户空间进程通过内核提供的一套接口和系统进行交互，这些接口让用户空间进程能够受控地访问系统资源、创建新的进程以及和其他进程通信等。受控表示用户进程不能不受限制地做任何想做的事情，这对保证系统的稳定非常关键。在Linux系统中，系统调用是除了except</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记（六）进程调度</title>
      <link>https://www.huliujia.com/blog/3fbf8bbcd3d7fe167ceefd76538053515946babd/</link>
      <pubDate>Tue, 29 May 2018 22:26:47 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/3fbf8bbcd3d7fe167ceefd76538053515946babd/</guid>
      <description>综述 内核调度子系统负责进程调度，调度程序决定让哪个进程运行、什么时候运行、运行多久。调度程序的目标有两个：一个是最大化系统资源的利用率，一个是减少和用户的交互延迟，让用户觉得多个进程在同时运行。这两个目标是冲突的，需要做trade-off。 多任务操作系统 多</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记（五）进程地址空间</title>
      <link>https://www.huliujia.com/blog/9c6895a796464a3bac7fba4b17f76e1ae03d2ab4/</link>
      <pubDate>Thu, 10 May 2018 22:23:24 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/9c6895a796464a3bac7fba4b17f76e1ae03d2ab4/</guid>
      <description>进程地址空间简介 Linux是一个虚拟内存操作系统，系统中的所有进程以虚拟方式共享内存。从进程的视角来看，它独占系统中所有的物理内存，并且一个进程的地址空间可以远远大于物理内存的大小。 进程的地址空间由可寻址的虚拟内存组成，进程通过地址空间中的虚拟地址访问内存</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记（四）进程管理</title>
      <link>https://www.huliujia.com/blog/23e0a634f0ac72e53813ffbd8a042fbebff97041/</link>
      <pubDate>Wed, 09 May 2018 22:16:04 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/23e0a634f0ac72e53813ffbd8a042fbebff97041/</guid>
      <description>进程简介 进程（Process）是Unix操作系统最基本的抽象概念之一。进程是正在执行的程序，同时也是操作系统进行资源管理的最小单位，进程需要管理打开的文件、挂起的信号、内核内部数据、处理器状态等。 线程（Thread）是进程中正在执行的程序片段，是操作系统进</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记（三）Block I/O层</title>
      <link>https://www.huliujia.com/blog/b332e9cef68c8d3efe84778931ffb98a6173812d/</link>
      <pubDate>Fri, 27 Apr 2018 22:11:59 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/b332e9cef68c8d3efe84778931ffb98a6173812d/</guid>
      <description>块设备（Block Device）简介 块设备是一种以块（block）为单位可以进行随机存取的硬件设备。常见的块设备有硬盘，软盘，闪存等。 块设备的最小寻址单元是扇区（sector），一个扇区是2\^n个字节，512Bytes是最常见的扇区大小。内核的文件系统使</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记（二）内存管理</title>
      <link>https://www.huliujia.com/blog/0b652a8747751273cc34800581e12835351e5ae1/</link>
      <pubDate>Tue, 24 Apr 2018 09:10:59 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/0b652a8747751273cc34800581e12835351e5ae1/</guid>
      <description>综述 本文首先介绍和内存管理相关的一些概念如page，zone，然后介绍多种获得内存的方式，最后介绍Linux的slab层（slab分配器）。 页（page） 页是Linux内核进行内存管理的基本单元。MMU和虚拟内存也都使用页作为基本管理单元。不同的架构有不同</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记（一）虚拟文件系统（VFS）</title>
      <link>https://www.huliujia.com/blog/81d31574c9a0088e8ae0c304020b4b1c4f6b8fb9/</link>
      <pubDate>Fri, 20 Apr 2018 15:40:05 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/81d31574c9a0088e8ae0c304020b4b1c4f6b8fb9/</guid>
      <description>什么是VFS Vritual Filesystem 是给用户空间程序提供统一的文件和文件系统访问接口的内核子系统。借助VFS，即使文件系统的类型不同（比如NTFS和ext3），也可以实现文件系统之间交互（移动、复制文件等）， 从用户空间程序的角度来看，VFS提供了一个统一的抽象、接口。这使得用</description>
    </item>
    
    <item>
      <title>VFS中的数据结构（superblock、dentry、inode、file）</title>
      <link>https://www.huliujia.com/blog/bff01fecc6e590d3ff7101c34f4b3c8889272751/</link>
      <pubDate>Sat, 14 Apr 2018 12:46:53 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/bff01fecc6e590d3ff7101c34f4b3c8889272751/</guid>
      <description>VFS简介 VFS的理念是使用统一的数据结构在内核中保存不同类型文件系统的信息（含操作）。 VFS是一个介于用户程序和文件系统实现之间的一个抽象层，VFS既给了不同类型的文件系统支持Linux系统的公共接口，也给用户程序提供了一个统一的调用接口。 VFS背后的核</description>
    </item>
    
    <item>
      <title>Linux进程状态码总结</title>
      <link>https://www.huliujia.com/blog/f70756be368904eb2e2c463671d67fd5d0dd0b72/</link>
      <pubDate>Fri, 06 Apr 2018 18:46:02 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/f70756be368904eb2e2c463671d67fd5d0dd0b72/</guid>
      <description>在Linux中执行ps aux命令时，STAT列表示的是进程的状态。最近研究了一下进程状态码，这里做一个简单的总结。 下面是是ps的manual中给出的信息，本文将分别介绍每个状态 PROCESS STATE CODES Here are the different values that the s, stat and state output specifiers (header &amp;quot;STAT&amp;quot; or &amp;quot;S&amp;quot;) will display to describe the state of a process: D uninterruptible sleep (usually IO) R running or runnable (on run</description>
    </item>
    
  </channel>
</rss>