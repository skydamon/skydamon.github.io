<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源码解析 on 胡刘郏的技术博客</title>
    <link>https://www.huliujia.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
    <description>Recent content in 源码解析 on 胡刘郏的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 30 Oct 2021 14:28:02 +0800</lastBuildDate>
    
	<atom:link href="https://www.huliujia.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LevelDB源码解析(15) 写操作之MakeRoomForWrite</title>
      <link>https://www.huliujia.com/blog/056e5fe63f/</link>
      <pubDate>Sat, 30 Oct 2021 14:28:02 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/056e5fe63f/</guid>
      <description>背景 LevelDB每次写入key-value都是写入到内存中的Memtable中的，但是Memtable的空间不是无限的，Memtable写满后，就需要调用MakeRoomForWrite把Memtable转存为Immutable Memtable，并创建新</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(14) 写操作之Write主流程</title>
      <link>https://www.huliujia.com/blog/24af576aa3/</link>
      <pubDate>Thu, 28 Oct 2021 09:07:39 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/24af576aa3/</guid>
      <description>leveldb对外提供的写入接口是Put，Put的实现如下： Status DB::Put(const WriteOptions &amp;amp;opt, const Slice &amp;amp;key, const Slice &amp;amp;value) { WriteBatch batch; batch.Put(key, value); return Write(opt, &amp;amp;batch); } WriteBatch是一个比较简单的类，只有一个string类型的成员变量rep_。提供了插入、删除、遍历等操作，详细实现可以参考LevelDB源码解析(5)</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(13) BackgroundCompaction SST文件合并</title>
      <link>https://www.huliujia.com/blog/4496bd928e/</link>
      <pubDate>Tue, 26 Oct 2021 09:23:59 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/4496bd928e/</guid>
      <description>背景 LevelDB的名字中的Level表示文件是分层存储的，默认最多7层，每层有0到N个文件。除了L0层，每层内部的文件之间都是有序的(所谓Sorted String Table)，互斥的(相互之间的key范围没有重叠)。而L0层的文件都是从Memtable直接落盘的，</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(12) Memtable落盘</title>
      <link>https://www.huliujia.com/blog/124132a9b3/</link>
      <pubDate>Wed, 06 Oct 2021 09:45:45 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/124132a9b3/</guid>
      <description>背景 LevelDB源码解析(4) MemTable介绍了Memtable，LevelDB会先把key-value插入到MemTable中。如果MemTable写满了，就会新建一个MemTable进行写入。旧的Memtablex会落盘。一个Memtable会产</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(11) SST文件结构</title>
      <link>https://www.huliujia.com/blog/6974db6de9/</link>
      <pubDate>Tue, 05 Oct 2021 16:53:44 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/6974db6de9/</guid>
      <description>背景 前面我们逐渐深入的介绍了LevelDB从插入key-value到落盘的整个过程，感兴趣的读者可以移步相关文章： LevelDB源码解析(4) MemTable LevelDB源码解析(5) WriteBatch LevelDB源码解析(6) 写任务(WriterBatch)合并 LevelDB源码</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(10) TableBuilder（Memtable序列化）</title>
      <link>https://www.huliujia.com/blog/02ad8ac30a/</link>
      <pubDate>Tue, 05 Oct 2021 10:33:18 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/02ad8ac30a/</guid>
      <description>背景 在LevelDB源码解析(4) MemTable中我们介绍了Memtable，LevelDB会先把key-value插入到MemTable中。如果MemTable写满了，就会新建一个MemTable进行写入。旧的Memtable(也叫Immutable M</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(9) FilterBlockBuilder</title>
      <link>https://www.huliujia.com/blog/1a8dbd0991/</link>
      <pubDate>Mon, 04 Oct 2021 21:52:31 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/1a8dbd0991/</guid>
      <description>背景 Filter block为SST中一个区块，filter block由多个filter组成，每个data block对应一个filter（但是一个filter可能对应多个data block）。LevelDB在进入data block中查找前会先检查filter，如果fi</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(8) BlockBuilder</title>
      <link>https://www.huliujia.com/blog/6a7ee0401f/</link>
      <pubDate>Mon, 04 Oct 2021 10:45:17 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/6a7ee0401f/</guid>
      <description>背景 一个SST文件由5个区块组成，其中三个区块都是由BlockBuilder构建的，所以在讲SST文件的构建之前，先讲一下BlockBuilder。BlockBuilder接受一组key-value，将其序列化到buffer中，buffer的数据就是要写入</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(7) 预写日志(WAL)</title>
      <link>https://www.huliujia.com/blog/e8d980b551/</link>
      <pubDate>Sat, 02 Oct 2021 08:36:10 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/e8d980b551/</guid>
      <description>背景 LevelDB每次写key-value不会直接写到文件中，而是先暂存在Memtable中，Memtable写满后再写到文件中。如果发生故障(比如宕机)，保存在Memtable中的key-value就会全部丢失。所以为了保证数据的原子性和持久性，每次写k</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(6) 写任务(WriterBatch)合并</title>
      <link>https://www.huliujia.com/blog/cc155a0319/</link>
      <pubDate>Fri, 01 Oct 2021 12:08:07 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/cc155a0319/</guid>
      <description>背景 写任务合并是由函数BuildBatchGroup来完成的，BuildBatchGroup会把任务队列writers_中若干个Writer的数据合并到一起，从而减少磁盘写次数，提高写性能。虽然每次写入的时候是往Memtable里写，但是为了在故障发生时保</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(5) WriteBatch</title>
      <link>https://www.huliujia.com/blog/3c240f2a7b/</link>
      <pubDate>Sun, 18 Apr 2021 21:34:10 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/3c240f2a7b/</guid>
      <description>简介 LevelDB的官方注释是这么介绍WriteBatch的： WriteBatch holds a collection of updates to apply atomically to a DB 如何保证原子性可能需要看完对WriteBatch的使用才能理清楚，这里只能确定一个WriteBatch对象可以包含多条更新记录（插入/删除），支持批量写入。 WriteBa</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(4) MemTable</title>
      <link>https://www.huliujia.com/blog/c5e8646cb4765da867b3936b2bae62843bded7e5/</link>
      <pubDate>Sun, 11 Apr 2021 21:28:49 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/c5e8646cb4765da867b3936b2bae62843bded7e5/</guid>
      <description>简介 MemTable是LevelDB在内存中的缓存库。用户写入数据时，LevelDB会先把数据写入到MemTable中。如果MemTable写满了，就会新建一个MemTable进行写入。后台再异步把旧的MemTable压缩写到磁盘上。因为旧的MemTabl</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(3) 变长编码</title>
      <link>https://www.huliujia.com/blog/7c34da2c9a2d27bea2ec43f9a0401724bc48bffd/</link>
      <pubDate>Sun, 04 Apr 2021 18:35:23 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/7c34da2c9a2d27bea2ec43f9a0401724bc48bffd/</guid>
      <description>背景 LevelDB在内存中存储key、value时，最后是以单值形式存储到一个跳跃表中的，跳跃表我们在上一篇文章LevelDB源码解析之SkipList(跳跃表）聊过了。这里主要想谈一下，LevelDB是如何把key、value编码到一个单值里面的，顺带分</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(2) SkipList(跳跃表)</title>
      <link>https://www.huliujia.com/blog/bcd8d4d2415144bf21c2e3fc695cf55510653264/</link>
      <pubDate>Sun, 28 Mar 2021 22:35:46 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/bcd8d4d2415144bf21c2e3fc695cf55510653264/</guid>
      <description>背景 SkipList是LevelDB的MemTable使用的底层存储结构，LevelDB实现了一个支持泛型的跳跃表。本文不会具体介绍跳跃表的数据结构，如果读者不了解跳跃表的原理、实现，可以先看一下跳跃表（Skiplist）从原理到实现 SkipList的对外</description>
    </item>
    
    <item>
      <title>LevelDB源码解析(1) Arena内存分配器</title>
      <link>https://www.huliujia.com/blog/e6640480282d9a4273dcf04cb98adc60c2961dd5/</link>
      <pubDate>Tue, 09 Mar 2021 08:56:50 +0800</pubDate>
      
      <guid>https://www.huliujia.com/blog/e6640480282d9a4273dcf04cb98adc60c2961dd5/</guid>
      <description>背景 LevelDB中需要频繁申请和释放内存，如果直接使用系统的new/delete或者malloc/free接口申请和释放内存，会产生大量内存碎片，进而拖累系统的性能表现。所以LevelDB实现了一个Area内存分配器来对内存进行管理，以保证性能。 Aren</description>
    </item>
    
  </channel>
</rss>